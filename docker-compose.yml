version: '3.8'

services:

  nginx:
    image: nginx:1.23.3
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/templates:/etc/nginx/templates
    restart: unless-stopped
    depends_on:
      - api-fa
      - api-auth
    env_file: .env
    ports:
      - "80:80"

# SHOWS API SERVICES (FastAPI)
  elasticsearch-fa:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.8
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - USE_SSL=false
      - "ES_JAVA_OPTS=-Xmx1000m -Xms1000m"
    restart: unless-stopped
    hostname: ${FA_ELASTIC_HOST}
    ports:
      - "${FA_ELASTIC_PORT}"

  redis-fa:
    image: redis:6.2.6
    command: --port ${FA_REDIS_PORT}
    hostname: ${FA_REDIS_HOST}
    ports:
      - "${FA_REDIS_PORT}"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5

  api-fa:
    build: ./fastapi-solution
    hostname: ${FA_GUNICORN_HOST}
    command: >
      gunicorn main:app --bind ${FA_GUNICORN_HOST}:${FA_GUNICORN_PORT} -k uvicorn.workers.UvicornWorker
    env_file: .env
    restart: always
    depends_on:
      - elasticsearch-fa
      - redis-fa
    ports:
      - "${FA_GUNICORN_PORT}"

  postgres-fa:
    image: postgres:15
    environment:
      POSTGRES_USER: ${FA_POSTGRES_USER}
      POSTGRES_PASSWORD: ${FA_POSTGRES_PASSWORD}
      POSTGRES_DB: ${FA_POSTGRES_DB}
    command: -p ${FA_POSTGRES_PORT}
    hostname: ${FA_POSTGRES_HOST}
    ports:
      - "${FA_POSTGRES_PORT}"
    volumes:
      - postgres_fa_data:/var/lib/postgresql/data/
      - ./etl/postgres_to_es/movies_dmp.sql:/docker-entrypoint-initdb.d/movies_dmp.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${FA_POSTGRES_DB} -U ${FA_POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  etl-fa:
    build: ./etl
    env_file: .env
    depends_on:
      - elasticsearch-fa

# AUTH SERVICES (Flask)

  redis-auth:
    image: redis:6.2.6
    volumes:
      - redis_auth_data:/data
    command: >
      --requirepass ${REDIS_PASSWORD} --appendonly yes --port ${REDIS_PORT}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    env_file: .env
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5

  postgres-auth:
    image: postgres:15
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data/
      - ./tests/functional/test_data/create_data.sql:/docker-entrypoint-initdb.d/create_data.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: -p ${POSTGRES_PORT}
    hostname: ${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT}"
    env_file: .env
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api-auth:
    build: ./flask
    hostname: ${FLASK_HOST}
    command: >
      gunicorn main:app --bind ${FLASK_HOST}:${FLASK_PORT}
    ports:
      - "${FLASK_PORT}"
    env_file: .env
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis-auth:
        condition: service_healthy

volumes:
  postgres_auth_data:
  postgres_fa_data:
  redis_auth_data:
