"""init

Revision ID: 01d6985a9138
Revises: 
Create Date: 2023-03-05 13:55:53.062053

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '01d6985a9138'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('id', sa.UUID(), nullable=False, comment='id записи'),
    sa.Column('name', sa.String(length=72), nullable=False, comment='Название роли'),
    sa.Column('description', sa.String(length=512), nullable=False, comment='Описание роли'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('id', name=op.f('uq_roles_id')),
    sa.UniqueConstraint('name', name=op.f('uq_roles_name'))
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False, comment='id Пользователя'),
    sa.Column('login', sa.String(length=72), nullable=False, comment='Логин пользователя'),
    sa.Column('email', sa.String(length=320), nullable=False, comment='Email пользователя'),
    sa.Column('password_hash', sa.String(length=128), nullable=False, comment='Хэш пароля пользователя'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('id', name=op.f('uq_users_id'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_login'), ['login'], unique=True)

    op.create_table('jwt_store',
    sa.Column('id', sa.UUID(), nullable=False, comment='id записи'),
    sa.Column('jwt_id', sa.String(length=36), nullable=False),
    sa.Column('expiration_date', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('type', sa.String(length=32), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_jwt_store_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_jwt_store')),
    sa.UniqueConstraint('id', name=op.f('uq_jwt_store_id'))
    )
    with op.batch_alter_table('jwt_store', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_jwt_store_jwt_id'), ['jwt_id'], unique=False)
    op.create_table('login_history',
    sa.Column('id', sa.UUID(), nullable=False, comment='id Записи'),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('ip', sa.String(length=45), nullable=False, comment='IP пользователя'),
    sa.Column('user_agent', sa.Text(), nullable=False, comment='User-Agent пользователя'),
    sa.Column('user_device_type', sa.String(length=255), nullable=False),
    sa.Column('datetime', sa.DateTime(), nullable=False, comment='Дата и время входа'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_login_history_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'user_device_type', name=op.f('pk_login_history')),
    sa.UniqueConstraint('id', 'user_device_type', name=op.f('uq_login_history_id')),
    postgresql_partition_by='LIST (user_device_type)'
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "login_history_in_tablet" 
        PARTITION OF "login_history" FOR VALUES IN ('tablet')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "login_history_in_mobile" 
        PARTITION OF "login_history" FOR VALUES IN ('mobile')"""
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "login_history_in_web" 
        PARTITION OF "login_history" FOR VALUES IN ('web')"""
    )
    op.create_table('social_accounts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('social_id', sa.String(length=128), nullable=False),
    sa.Column('social_name', sa.String(length=128), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_social_accounts_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_social_accounts')),
    sa.UniqueConstraint('social_id', 'social_name', name='social_pk')
    )
    op.create_table('user_role',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('role_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_user_role_role_id_roles'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_role_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_role')),
    sa.UniqueConstraint('id', name=op.f('uq_user_role_id')),
    sa.UniqueConstraint('user_id', 'role_id', name=op.f('uq_user_role_user_id'))
    )

    with op.batch_alter_table('jwt_store', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_jwt_store_id'), ['id'])
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_roles_id'), ['id'])

    with op.batch_alter_table('user_role', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_user_role_id'), ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_users_id'), ['id'])

    with op.batch_alter_table('login_history', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_login_history_id'), ['id', 'user_device_type'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_role')
    op.drop_table('social_accounts')
    op.drop_table('login_history')
    with op.batch_alter_table('jwt_store', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_jwt_store_jwt_id'))

    op.drop_table('jwt_store')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_login'))

    op.drop_table('users')
    op.drop_table('roles')
    # ### end Alembic commands ###
